  # Die finalen Entitätsnamen setzen sich aus dem Sensornamen und dem Gerätenamen zusammen
  # Beim ersten Sensor hier also SolarFlow Hub State (sensor.solarflow_hub_state)
  sensor:
    - name: "Hub State"
      unique_id: "<deviceID>hubState"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{% if value_json.hubState == 0 %}Standby{%elif value_json.hubState == 1 %}Ausschalten{%endif%}"
      icon: mdi:vector-link
      device_class: "enum"
      options: ['Standby','Ausschalten']
      # Der gesamte device-Block muss nur einmal angegeben werden, daher ist bei den nachfolgenden Entitäten nur noch indetifiers vorhanden
      device: 
        name: "SolarFlow" 
        identifiers: "<EurePVHubSeriennummer>"
        manufacturer: "Zendure"
        # Ggf. an euer Modell anpassen
        model: "SmartPV Hub 1200 Controller"

    - name: "Solar Input Power"
      unique_id: "<deviceID>solarInputPower"
      state_topic: "<appKey>/<deviceID>/state"
      unit_of_measurement: "W"
      device_class: "power"
      value_template: >
        {% if states('sensor.solarflow_solar_input_power') not in ['unknown'] %}  {# Muss ggf. an euren Entitätsnamen angepasst werden. #}
          {{ int(value_json.solarInputPower, 0) }}
        {% else %}
          {{ int(0) }}
        {% endif %}
      state_class: "measurement"
      icon: mdi:solar-panel
      device: 
        identifiers: "<EurePVHubSeriennummer>"
      
    - name: "Pack Input Power"
      unique_id: "<deviceID>packInputPower"
      state_topic: "<appKey>/<deviceID>/state"
      unit_of_measurement: "W"
      device_class: "power"
      value_template: >
        {% if states('sensor.solarflow_pack_input_power') not in ['unknown'] %} {# Muss ggf. an euren Entitätsnamen angepasst werden. #}
          {{ int(value_json.packInputPower, 0) }}
        {% else %}
          {{ int(0) }}
        {% endif %}
      state_class: "measurement"
      icon: mdi:battery-arrow-down-outline
      device: 
        identifiers: "<EurePVHubSeriennummer>"
      
    - name: "Output Pack Power"
      unique_id: "<deviceID>outputPackPower"
      state_topic: "<appKey>/<deviceID>/state"
      unit_of_measurement: "W"
      device_class: "power"
      value_template: >
        {% if states('sensor.solarflow_output_pack_power') not in ['unknown'] %} {# Muss ggf. an euren Entitätsnamen angepasst werden. #}
          {{ int(value_json.outputPackPower, 0) }}
        {% else %}
          {{ int(0) }}
        {% endif %}
      state_class: "measurement"
      icon: mdi:battery-arrow-up-outline
      device: 
        identifiers: "<EurePVHubSeriennummer>"
      
    - name: "Output Home Power"
      unique_id: "<deviceID>outputHomePower"
      state_topic: "<appKey>/<deviceID>/state"
      unit_of_measurement: "W"
      device_class: "power"
      value_template: >
        {% if states('sensor.solarflow_output_home_power') not in ['unknown'] %} {# Muss ggf. an euren Entitätsnamen angepasst werden. #}
          {{ int(value_json.outputHomePower, 0) }}
        {% else %}
          {{ int(0) }}
        {% endif %}
      state_class: "measurement"
      icon: mdi:home-import-outline
      device: 
        identifiers: "<EurePVHubSeriennummer>"
      
    - name: "Output Limit"
      unique_id: "<deviceID>outputLimit"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{{ value_json.outputLimit | int }}"
      unit_of_measurement: "W"
      icon: mdi:home-lightning-bolt-outline
      device: 
        identifiers: "<EurePVHubSeriennummer>"
        
    - name: "Input Limit"
      unique_id: "<deviceID>inputLimit"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{{ value_json.inputLimit | int }}"
      unit_of_measurement: "W"
      device: 
        identifiers: "<EurePVHubSeriennummer>"
    
    - name: "Remain Out Time"
      unique_id: "<deviceID>remainOutTime"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{{ value_json.remainOutTime | int }}"
      device_class: "duration"
      unit_of_measurement: "min"
      device: 
        identifiers: "<EurePVHubSeriennummer>"
    
    - name: "Remain Input Time"
      unique_id: "<deviceID>remainInputTime"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{{ value_json.remainInputTime | int }}"
      device_class: "duration"
      unit_of_measurement: "min"
      device: 
        identifiers: "<EurePVHubSeriennummer>"
    
    - name: "Pack State"
      unique_id: "<deviceID>packState"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{% if value_json.packState == 0 %}Standby{%elif value_json.packState == 1 %}Laden{%elif value_json.packState == 2 %}Entladen{%endif%}"
      device_class: "enum"
      options: ['Standby','Laden','Entladen']
      icon: mdi:battery-sync-outline
      device: 
        identifiers: "<EurePVHubSeriennummer>"
    
    - name: "Pack Num"
      unique_id: "<deviceID>packNum"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{{ value_json.packNum | int }}"
      icon: mdi:battery-check-outline
      device: 
        identifiers: "<EurePVHubSeriennummer>"
    
    - name: "Electric Level"
      unique_id: "<deviceID>electricLevel"
      state_topic: "<appKey>/<deviceID>/state"
      unit_of_measurement: "%"
      device_class: "battery"
      value_template: "{{ value_json.electricLevel | int }}"
      device: 
        identifiers: "<EurePVHubSeriennummer>"
    
    - name: "SOC Set"
      unique_id: "<deviceID>socSet"
      state_topic: "<appKey>/<deviceID>/state"
      unit_of_measurement: "%"
      value_template: "{{ value_json.socSet | int / 10 }}"
      icon: mdi:battery-plus
      device: 
        identifiers: "<EurePVHubSeriennummer>"
        
    - name: "Inverse Max Power"
      unique_id: "<deviceID>inverseMaxPower"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{{ value_json.inverseMaxPower | int }}"
      unit_of_measurement: "W"
      icon: mdi:flash-alert
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "Solar Power 1"
      unique_id: "<deviceID>solarPower1"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if states('sensor.solarflow_solar_power_1') not in ['unknown'] %} {# Muss ggf. an euren Entitätsnamen angepasst werden. #}
          {{ int(value_json.solarPower1, 0) }}
        {% else %}
          {{ int(0) }}
        {% endif %}
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"
      icon: mdi:solar-panel
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "Solar Power 2"
      unique_id: "<deviceID>solarPower2"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if states('sensor.solarflow_solar_power_2') not in ['unknown'] %} {# Muss ggf. an euren Entitätsnamen angepasst werden. #}
          {{ int(value_json.solarPower2, 0) }}
        {% else %}
          {{ int(0) }}
        {% endif %}
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"
      icon: mdi:solar-panel
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "Pass Mode"
      unique_id: "<deviceID>passMode"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{% if value_json.passMode == 0 %}Automatisch{%elif value_json.passMode == 1 %}Immer aus{%elif value_json.passMode == 2 %}Immer ein{%endif%}"
      device_class: "enum"
      options: ['Automatisch','Immer aus','Immer ein']
      icon: mdi:auto-mode
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "AC Mode"
      unique_id: "<deviceID>acMode"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{% if value_json.acMode == 2 %}Entladen{%elif value_json.acMode == 1 %}Laden{%endif%}"
      options: ['Entladen','Laden']
      device_class: "enum"
      icon: mdi:current-ac
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "Batterie <Nr> maxTemp"
      unique_id: "<deviceID>Batterie<Nr>maxTemp"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if (value_json.packData | is_defined) %}
          {% for i in value_json.packData %}
            {% if i.sn == "<EureBatterieSeriennummer>" %}
              {{ (i.maxTemp | float - 273.15) | round(2) }}
            {% endif %}
          {% endfor %}
        {% endif %}
      unit_of_measurement: "°C"
      device_class: "temperature"
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "Batterie <Nr> maxVol"
      unique_id: "<deviceID>Batterie<Nr>maxVol"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if (value_json.packData | is_defined) %}
          {% for i in value_json.packData %}
            {% if i.sn == "<EureBatterieSeriennummer>" %}
              {{ i.maxVol | float / 100 }}
            {% endif %}
          {% endfor %}
        {% endif %}
      unit_of_measurement: "V"
      device_class: "voltage"
      icon: mdi:alpha-v-circle-outline
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "Batterie <Nr> minVol"
      unique_id: "<deviceID>Batterie<Nr>minVol"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if (value_json.packData | is_defined) %}
          {% for i in value_json.packData %}
            {% if i.sn == "<EureBatterieSeriennummer>" %}
              {{ i.minVol | float / 100 }}
            {% endif %}
          {% endfor %}
        {% endif %}
      unit_of_measurement: "V"
      device_class: "voltage"
      icon: mdi:alpha-v-circle-outline
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "Batterie <Nr> socLevel"
      unique_id: "<deviceID>Batterie<Nr>socLevel"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if (value_json.packData | is_defined) %}
          {% for i in value_json.packData %}
            {% if i.sn == "<EureBatterieSeriennummer>" %}
              {{ i.socLevel | int }}
            {% endif %}
          {% endfor %}
        {% endif %}
      unit_of_measurement: "%"
      device_class: "battery"
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    # Nur Hyper 2000 und Ace 1500
    - name: "Grid Input Power"
      unique_id: "<deviceID>gridInputPower"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if states('sensor.solarflow_grid_input_power') not in ['unknown'] %}
          {{ int(value_json.gridInputPower, 0) }}
        {% else %}
          {{ int(0) }}
        {% endif %}
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"
      device: 
        identifiers: "<EurePVHubSeriennummer>"
            
    # Nur Hyper 2000
    - name: "AC Output Power"
      unique_id: "<deviceID>acOutputPower"
      state_topic: "<appKey>/<deviceID>/state"
        value_template: >
          {% if states('sensor.solarflow_ac_output_power') not in ['unknown'] %}
            {{ int(value_json.acOutputPower, 0) }}
          {% else %}
            {{ int(0) }}
          {% endif %}
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - name: "Hyper Tmp"
      unique_id: "<deviceID>hyperTmp"
      state_topic: "<appKey>/<deviceID>/state"
      unit_of_measurement: "°C"
      device_class: "temperature"
      value_template: "{{ value_json.hyperTmp | float / 10 - 273.15 }}"
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    # Nur Ace 1500
    - name: "DC Output Power"
      unique_id: "<deviceID>dcOutputPower"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if states('sensor.solarflow_dc_output_power') not in ['unknown'] %}
          {{ int(value_json.dcOutputPower, 0) }}
        {% else %}
          {{ int(0) }}
        {% endif %}
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"
      device: 
        identifiers: "<EurePVHubSeriennummer>"
        
  binary_sensor:
    - name: "WiFi State"
      unique_id: "<deviceID>wifiState"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: >
        {% if (value_json.wifiState | is_defined) %}
          {{ value_json.wifiState | abs() }}
        {% endif %}
      payload_on: '1'
      payload_off: '0'
      device_class: "connectivity"
      entity_category: diagnostic
      device: 
        identifiers: "<EurePVHubSeriennummer>"
          
    - name: "Heat State"
      unique_id: "<deviceID>heatState"
      state_topic: "<appKey>/<deviceID>/state"
      value_template: "{{ value_json.heatState | int }}"
      payload_on: '1'
      payload_off: '0'
      icon: mdi:heating-coil
      device: 
        identifiers: "<EurePVHubSeriennummer>"
      
  switch:
    - unique_id: "<deviceID>masterSwitch"
      state_topic: "<appKey>/<deviceID>/state"
      state_off: false
      command_topic: "<appKey>/<deviceID>/masterSwitch/set"
      name: "Master Switch"
      device_class: "switch"
      icon: mdi:gesture-tap-button
      value_template: "{{ value_json.masterSwitch | default('') }}"
      payload_on: true
      payload_off: false
      state_on: true
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - unique_id: "<deviceID>buzzerSwitch"
      state_topic: "<appKey>/<deviceID>/state"
      state_off: false
      command_topic: "<appKey>/<deviceID>/buzzerSwitch/set"
      name: "Buzzer Switch"
      device_class: "switch"
      icon: mdi:bullhorn-outline
      value_template: "{{ value_json.buzzerSwitch | default('') }}"
      payload_on: true
      payload_off: false
      state_on: true
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    - unique_id: "<deviceID>autoRecover"
      state_topic: "<appKey>/<deviceID>/state"
      state_off: false
      command_topic: "<appKey>/<deviceID>/autoRecover/set"
      name: "Auto Recover"
      device_class: "switch"
      icon: mdi:restore
      value_template: "{{ value_json.autoRecover | default('') }}"
      payload_on: true
      payload_off: false
      state_on: true
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    # Nur Hyper 2000 und Ace 1500
    - unique_id: "<deviceID>acSwitch"
      state_topic: "<appKey>/<deviceID>/state"
      state_off: false
      command_topic: "<appKey>/<deviceID>/acSwitch/set"
      name: "AC Switch"
      device_class: "switch"
      icon: mdi:current-ac
      value_template: "{{ value_json.acSwitch | default('') }}"
      payload_on: true
      payload_off: false
      state_on: true
      device: 
        identifiers: "<EurePVHubSeriennummer>"

    # Nur Ace 1500
    - unique_id: "<deviceID>dcSwitch"
      state_topic: "<appKey>/<deviceID>/state"
      state_off: false
      command_topic: "<appKey>/<deviceID>/dcSwitch/set"
      name: "DC Switch"
      device_class: "switch"
      icon: mdi:current-dc
      value_template: "{{ value_json.dcSwitch | default('') }}"
      payload_on: true
      payload_off: false
      state_on: true
      device: 
        identifiers: "<EurePVHubSeriennummer>"
